
queries:
  - name: Where each secret is used
    query: |
      MATCH (secret:GithubSecret)<-[:USES_SECRET]-(repo:GithubRepo)
      RETURN secret.name,collect(distinct repo.name)
  
  - name: Where each leak appeared
    query: |
      MATCH (leak:GithubLeak)-[:PART_OF]->(repo:GithubRepo)
      RETURN leak.name,collect(distinct repo.name)
  
  - name: Secrets each ppal can steal
    query: |
      MATCH (ppal:Github)-[r:CAN_STEAL_SECRET]->(secret:GithubSecret)
      RETURN ppal.name,collect(distinct secret.name)
  
  - name: Org admins
    query: |
      MATCH (org:GithubOrganization)<-[r:PART_OF {membership:"admin"}]-(ppal:Github)
      RETURN org.name,collect(distinct ppal.name)
  
  - name: Who can merge in each repo
    query: |
      MATCH(repo:GithubRepo)-[r:HAS_BRANCH]->(b:GithubBranch)<-[r2:CAN_MERGE]-(ppal:Github)
      RETURN repo.name,collect(distinct ppal.name)
  
  - name: Repos each team can merge
    query: |
      MATCH(team:GithubTeam)-[r1:CAN_MERGE]->(b:GithubBranch)<-[r2:HAS_BRANCH]-(repo:GithubRepo)
      WITH team, collect(distinct repo.name) as repos
      MATCH(team)<-[:MEMBER_OF]-(user:GithubUser)
      RETURN team.name,count(user),repos
  
  - name: Repos each team can write
    query: |
      MATCH(team:GithubTeam)-[r:HAS_PERMS{push:true}]->(repo:GithubRepo)
      WITH team, collect(distinct repo.name) as repos
      MATCH(team)<-[:MEMBER_OF]-(user:GithubUser)
      RETURN team.name,count(user),repos
  
  - name: Repos each user can merge
    query: |
      MATCH(user:GithubUser)-[r1:CAN_MERGE]->(b:GithubBranch)<-[r2:HAS_BRANCH]-(repo:GithubRepo)
      RETURN user.name,collect(distinct repo.name)
  
  - name: Privilege escalations
    query: |
      MATCH(ppal:GithubPrincipal)-[r:PRIVESC]->(resource)
      RETURN ppal.name,collect(distinct resource.name)
  
  - name: Ppals can merge in mirrored repos
    query: |
      MATCH (ppal)-[r3:CAN_MERGE]->(b:GithubBranch)<-[r2:HAS_BRANCH]-(repo:GithubRepo)<-[:IS_MIRROR]-(resource)
      RETURN ppal.name,collect(distinct repo.name),collect(distinct resource.name)
  
  - name: Repos with missconfigured codeowners
    query: |
      MATCH(repo:GithubRepo) WHERE repo.unkown_codeowners <> [] OR repo.no_codeowners
      RETURN repo.name, repo.unkown_codeowners, repo.no_codeowners
  
  - name: Insecure Webhooks
    query: |
      MATCH(webhook:GithubWebhook) WHERE webhook.insecure_ssl <> "0"
      RETURN webhook.name, webhook.insecure_ssl
  
  - name: Actions supporting pull_request_target
    query: |
      MATCH(action:GithubAction) WHERE action.has_pull_request_target RETURN action.full_name
  
  - name: Actions with injection_points
    query: |
      MATCH(action:GithubAction) WHERE action.injection_points <> [] RETURN action.full_name, action.injection_points
  
  - name: Actions with env vars
    query: |
      MATCH(action:GithubAction) WHERE action.env_vars <> [] RETURN action.full_name, action.env_vars
  
  - name: Too many writers in repo
    query: |
      MATCH(repo:GithubRepo)<-[r:HAS_PERMS]-(u:GithubUser)
      WHERE (r.admin = True OR r.maintain = True OR r.push = True)
      WITH repo, count(u) as num_users
      WHERE num_users > 15
      RETURN repo.name, num_users
